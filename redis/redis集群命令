##集群检查命令，俩ok就是没毛病
[root@Topaz src]# ./redis-trib.rb check 192.168.100.34:7000
[OK] All nodes agree about slots configuration.
[OK] All 16384 slots covered.
注意：没加入集群的节点不能用redis-trib.rb检查，用集群的命令去检查不在集群里的节点，得到的一定是问题。
真实的故事：https://github.com/Topaz1618/Topaz_images/blob/master/work/I91FBMEQ%602%5B7XI%7ESYLL1X%60R.png
（才发现图片打不开了）现场演示一下：
[root@Topaz src]# ps -ef|grep 7005
root      8984     1  0 11:16 ?        00:00:00 redis-server 192.168.100.34:7005 [cluster]
[root@Topaz src]# kill -9 8984
[root@Topaz src]# cd /data/recluster/7005
[root@Topaz 7005]# rm -f appendonly.aof  dump.rdb  nodes.conf
root@Topaz 7005]# redis-server redis.conf
[root@Topaz 7005]# ps -ef|grep 7005
root     10563     1  0 11:46 ?        00:00:00 redis-server 192.168.100.34:7005 [cluster]
[root@Topaz 7005]# /usr/local/redis-3.2.0/src/redis-trib.rb check 192.168.100.34:7005  
>>> Performing Cluster Check (using node 192.168.100.34:7005)
M: d29989afbf3c14c7efdd08620ddefcf016cc9251 192.168.100.34:7005
   slots: (0 slots) master
   0 additional replica(s)
[OK] All nodes agree about slots configuration.
>>> Check for open slots...
>>> Check slots coverage...
[ERR] Not all 16384 slots are covered by nodes.

##单节点(没加到集群里的)检查，直接连就可以了，出现如下效果就没问题儿~~
[root@Topaz src]# redis-cli -h 192.168.100.34 -p 7000
192.168.100.34:7000> 

##节点node id，从属查看
[root@Topaz src]# ./redis-cli -h 192.168.100.34 -p 7003 cluster nodes
2705c2ed7b4fdb54c114ccafea7d9daaa0926c56 192.168.100.34:7000 master - 0 1471492700496 1 connected 0-5460
f240c8229fc0ee044d42b03f5c4ce26d4c9517af 192.168.100.34:7004 slave 2ebe9e2cb72b9103a190afa71e3ca290ad1b6573 0 1471492699995 5 connected
ba13cf3bde7f9540bc1531ad0cf803ffe0bf2250 192.168.100.34:7002 master - 0 1471492700996 3 connected 10923-16383
2ebe9e2cb72b9103a190afa71e3ca290ad1b6573 192.168.100.34:7001 master - 0 1471492700496 2 connected 5461-10922
2d053828d63cd96334b9140b408940520ba4bca6 192.168.100.34:7003 myself,slave 2705c2ed7b4fdb54c114ccafea7d9daaa0926c56 0 0 4 connected
1ebd5c8e0b4c36a9732c6e8082287f5e2a950045 :0 slave,fail,noaddr ba13cf3bde7f9540bc1531ad0cf803ffe0bf2250 1471491985114 1471491983111 6 disconnected
随便连个集群端口，出来了一大串子信息是不是有点懵逼呢，其实很简单
第一列：node id
第二列：Ip:Port
第三列：节点角色，master或slave
第四列：角色是slave的，后面接它属于的主节点的node id。举个例子：7004角色是slave,后面接的是7001的node id，所以7004是7001的从节点，晓得了伐？

##添加从节点
/usr/local/redis-3.2.0/src/redis-trib.rb add-node --slave --master-id [node id] 192.168.100.111:7002 [master ip]:[port]
node id:主节点的node id,选谁就做谁的从节点。先执行上面从属查看的命令，看主节点的node id，另外防止有的主节点没有从节点，有的全是从节点。
master ip:集群节点的ip
port：任意port，起到指定集群的作用。

##查看所有的key
[appmon@p2pshop1 ~]$ redis-cli -h 192.168.100.34 -p 7000
192.168.100.34:7000> keys *
  1) "18910989688_myCart"
  2) "P2P_AUTHORIZATION_KEY_18613858306"
  3) "13811487255_myCart"
  4) "AUTHORIZATION_KEY_13552728295"
  5) "AUTHORIZATION_KEY_15811337930"
  6) "SystemManager.newsCatalogs"
  7) "SystemManager.P_bottom_right"

 还有些简单命令：
 [root@web1 redis-3.2.0]# redis-cli  #连到redis
127.0.0.1:6379> set topaz so_cute    #添加一条数据
OK
127.0.0.1:6379> get topaz           #取值
"so_cute"
127.0.0.1:6379> lpush Topaz_meow s o o o o cute   #另一种存取数据的方式（这是从左边开始，还有rpush从右边）
(integer) 6
127.0.0.1:6379> lrange Topaz_meow 0 -1             #这个跟列表唯一区别是-1可以包含最后一个
1) "cute"
2) "o"
3) "o"
4) "o"
5) "o"
6) "s"
127.0.0.1:6379> lpop Topaz_meow        #从左边删除）
"cute"











 
 
 
 
 
 
 
 
 

